open logicFuncs

pred predForStatement0 [arg2,arg2',arg2'':Int,arg1,arg1',arg1'':Int] {
	(((True) in True) and arg1'=0 and arg2'=3
	=> 
	( andGate[andGate[((arg1' = 3.sub[arg2']) => True else False), ((arg2' >= 0) => True else False)], ((arg2' < 4) => True else False)] in True )) 

	(( andGate[andGate[((arg1 = 3.sub[arg2]) => True else False), ((arg2 >= 0) => True else False)], ((arg2 < 4) => True else False)] in True )
	 and( ((arg2 != 0) => True else False) in True ))
	=> 
	((True) in True) and arg2''=arg2.sub[1] and arg1''=arg1.add[1]
	=> 
	(andGate[andGate[((arg1'' = 3.sub[arg2'']) => True else False), ((arg2'' >= 0) => True else False)], ((arg2'' < 4) => True else False)] in True and  ( arg2'' >= 0 ) and ( arg2 > arg2''))

	(( andGate[andGate[((arg1 = 3.sub[arg2]) => True else False), ((arg2 >= 0) => True else False)], ((arg2 < 4) => True else False)] in True ) and not(( ((arg2 != 0) => True else False) in True ))
	 => 
	((((arg1 = 3) => True else False)) in True) ) 			 // post condition
}

check assertForStatement0 {
	 { all arg2:Int,arg1:Int | some arg2':Int,arg2'':Int,arg1':Int,arg1'':Int | ((True) in True)  => predForStatement0[arg2,arg2',arg2'',arg1,arg1',arg1''] }
}

