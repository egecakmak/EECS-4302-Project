open logicFuncs

pred predFunction0 [arg1,arg1',arg1'':Bool,arg2:Int] {
	((True) in True) and arg1'=False and  ( ((((arg2.rem[3] = 0) => True else False)) in True) => 
		 ((True) in True) and arg1''=True ) 
	((True) in True) 			 // post condition
}

fun funFunction0 [arg1,arg1',arg1'':Bool,arg2:Int] : Bool {
	{ return : Bool | ((True) in True) and arg1'=False and  ( ((((arg2.rem[3] = 0) => True else False)) in True) => 
		 ((True) in True) and arg1''=True )  and return = arg1''}
}

check assertFunction0 {
	 { all arg1:Bool,arg2:Int | some arg1':Bool,arg1'':Bool | ((andGate[((arg2 >= 0) => True else False), ((arg2 < 100) => True else False)]) in True)  => predFunction0[arg1,arg1',arg1'',arg2] }
}

pred predForStatement0 [arg1,arg1',arg1'':Int,arg3,arg3':Bool,arg2,arg2':Int,arg4,arg4',arg4'':Bool] {
	(((True) in True) and arg1'=99 and arg4=False
	=> 
	( andGate[andGate[((arg1' >= 0) => True else False), ((arg1' < 100) => True else False)], ((arg2 = 99.sub[arg1'].div[3]) => True else False)] in True )) 

	(( andGate[andGate[((arg1 >= 0) => True else False), ((arg1 < 100) => True else False)], ((arg2 = 99.sub[arg1].div[3]) => True else False)] in True )
	 and( ((arg1 != 0) => True else False) in True ))
	=> 
	((True) in True) and  ( ((((arg3' in True) => True else False)) in True) => 
		 ((True) in True) and arg4=False and arg2'=arg2.add[1] )  and arg4=False and arg3'=funFunction0[arg4,arg4',arg4'',arg1]  and arg1''=arg1.sub[1]
	=> 
	(andGate[andGate[((arg1'' >= 0) => True else False), ((arg1'' < 100) => True else False)], ((arg2' = 99.sub[arg1''].div[3]) => True else False)] in True and  ( arg1'' >= 0 ) and ( arg1 > arg1''))

	(( andGate[andGate[((arg1 >= 0) => True else False), ((arg1 < 100) => True else False)], ((arg2 = 99.sub[arg1].div[3]) => True else False)] in True ) and not(( ((arg1 != 0) => True else False) in True ))
	 => 
	((((arg2 = 33) => True else False)) in True) ) 			 // post condition
}

check assertForStatement0 {
	 { all arg1:Int,arg3:Bool,arg2:Int,arg4:Bool | some arg1':Int,arg1'':Int,arg3':Bool,arg2':Int,arg4':Bool,arg4'':Bool | ((True) in True)  => predForStatement0[arg1,arg1',arg1'',arg3,arg3',arg2,arg2',arg4,arg4',arg4''] }
}

