open logicFuncs

pred predFunction0 [arg1,arg1':Bool,arg2:Bool] {
	((True) in True) and arg1'=andGate[arg2, True]
	((((arg1' in False) => True else False)) in True) 			 // post condition
}

fun funFunction0 [arg1,arg1':Bool,arg2:Bool] : Bool {
	{ return : Bool | ((True) in True) and arg1'=andGate[arg2, True] and return = arg1'}
}

check assertFunction0 {
	 { all arg1:Bool,arg2:Bool | some arg1':Bool | ((True) in True)  => predFunction0[arg1,arg1',arg2] }
}

pred predForStatement0 [arg1,arg1':Bool,arg2,arg2',arg2'':Int,arg3,arg3':Bool,arg4:Int] {
	(((True) in True) and arg3=False and arg2'=0
	=>
	( andGate[((arg2' >= 0) => True else False), ((arg2' < arg4) => True else False)] in True ))

	(( andGate[((arg2 >= 0) => True else False), ((arg2 < arg4) => True else False)] in True )
	 and( ((arg2 < arg4) => True else False) in True ))
	=>
	((True) in True) and arg1'=funFunction0[arg3,arg3',arg1]  and arg2''=arg2.add[1] and arg3=False
	=>
	(andGate[((arg2'' >= 0) => True else False), ((arg2'' < arg4) => True else False)] in True and  ( arg2'' >= 0 ) and ( arg2 > arg2''))

	(( andGate[((arg2 >= 0) => True else False), ((arg2 < arg4) => True else False)] in True ) and not(( ((arg2 < arg4) => True else False) in True ))
	 =>
	((((arg1 in False) => True else False)) in True) ) 			 // post condition
}

check assertForStatement0 {
	 { all arg1:Bool,arg2:Int,arg3:Bool,arg4:Int | some arg1':Bool,arg2':Int,arg2'':Int,arg3':Bool | ((((arg1 in True) => True else False)) in True)  => predForStatement0[arg1,arg1',arg2,arg2',arg2'',arg3,arg3',arg4] }
}

