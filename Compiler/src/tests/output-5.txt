sig state0{
	arg1:Int,
	arg2:Int
}

fun funStatement0 (parg1:Int,parg2:Int) : state0 {
	{ n : state0 | 
		n.arg1 = (parg1 > 0 => parg1 else parg1 )
		 and n.arg2 = (parg1 > 0 => 1.add[1] else 2.sub[3] )
		 
	}
}

assert assertStatement0 {
	 all n: state0 | (n.arg1 != 0) => ( (  ( all field: funStatement0 [n.arg1,n.arg2] | { field.arg1 > 0}  and all field: funStatement0 [n.arg1,n.arg2] | { field.arg2 > 0}  )  or  ( all field: funStatement0 [n.arg1,n.arg2] | { field.arg1 < 0}  and all field: funStatement0 [n.arg1,n.arg2] | { field.arg2 < 0}  )  ) )
}

check assertStatement0

sig state1{
	arg1:Int,
	arg2:Int
}

fun funStatement1 (parg1:Int,parg2:Int) : state1 {
	{ n : state1 | 
		n.arg1 = (parg1 > 0 => parg1 else parg1 )
		 and n.arg2 = (parg1 > 0 => 1.add[1] else 2.sub[3] )
		 
	}
}

assert assertStatement1 {
	 all n: state1 | (n.arg1 = 0) => (all field: funStatement1 [n.arg1,n.arg2] | { field.arg2 != 0} )
}

check assertStatement1

